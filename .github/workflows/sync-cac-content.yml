name: Sync CaC content to OSCAL
on:
  push:
    branches:
      - 'main'

jobs:
  check-pr-message:
    runs-on: ubuntu-latest
    outputs:
      run_job_check_update: ${{ steps.check_pr.outputs.run_job_check_update }}
    steps:
    - name: Check if the PR comes from the sync of OSCAL content
      id: check_pr
      run: echo "::set-output name=run_job_check_update::true"

  check-cac-content-update:
    runs-on: ubuntu-latest
    needs: check-pr-message
    if: ${{ needs.check-pr-message.outputs.run_job_check_update == 'true' }}
    steps:
      # Step 1: Set up Python 3
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Specify the Python version
      # Step 2: Install Git (if not already installed)
      - name: Install Git
        run: sudo apt-get update && sudo apt-get install -y git
      # Step 3: Install Python dependencies
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install gitpython PyYAML deepdiff Jinja2 xmldiff 
      # Step 4: Checkout the ComplianceAsCode/content-test-filtering repository
      - name: Checkout (CTF)
        uses: actions/checkout@v4  # Use the latest version of actions/checkout
        with:
          repository: huiwangredhat/content-test-filtering
          ref: filter_controls_update
          path: ctf
      # Step 5: Detect content changes in the PR
      - name: Detect content changes in the PR
        run: |
          python ctf/content_test_filtering.py pr \
            --base d2d1faf6db138f649c235af0f701cdfc110a3ffb \
            --remote_repo https://github.com/ComplianceAsCode/content \
            --verbose --profile --rule --output json 13176 > output.json
      - name: Test if there are no content changes
        run: echo "CTF_OUTPUT_SIZE=$(stat --printf="%s" output.json)" >> $GITHUB_OUTPUT
        id: ctf
      - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        with:
          name: output
          path: output.json
      - name: Print changes to content detected if any
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        run: cat output.json
      - name: Print changes in different Files
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        run: |
          i=1  # Initialize the counter
          while IFS= read -r line; do
            # Process each line and output to a file with a dynamic name
            if echo "$line" | grep -q "rules"; then
              echo "$line" > "rules${i}.json"
            elif echo "$line" | grep -q "profiles"; then
              echo "$line" > "profiles${i}.json"
            else
              echo "$line" > "controls.json"
            fi
            i=$((i + 1))
          done < output.json
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: "controls.json"
      - name: File exists
        id: controls
        if: steps.check_files.outputs.files_exists == 'true'
        uses: notiz-dev/github-action-json-property@a5a9c668b16513c737c3e1f8956772c99c73f6e8 # v0.2.0
        with:
          path: 'controls.json'
          prop_path: 'controls'
      - run: echo ${{steps.controls.outputs.prop}}
    # Step 1: Checkout OSCAL content as the trestlebot lab
    - name: Checkout OSCAL content
      if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
      run: |
        git clone https://github.com/huiwangredhat/trestle-repo.git
        ls
        pwd
    # Step 2: Checkout trestlebot
    - name: Checkout trestlebot
      uses: actions/checkout@v4  # Use the latest version of actions/checkout
      with:
        repository: complytime/trestle-bot
    - name: Setup trestlebot
      run: |
        ls
        pwd
        python3.9 -m pip install --no-cache-dir --upgrade pip setuptools
        python3.9 -m pip install --no-cache-dir "poetry==1.7.1"
        poetry install
    - name: Sync catalog
      run: |
        poetry run trestlebot --help
        
     
      


      
